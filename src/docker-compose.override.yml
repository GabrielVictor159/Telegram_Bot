version: '3.4'

services:
  telegram.bot.webapi:
    image: telegrambotwebapi
    build:
      context: .
      dockerfile: Telegram.BOT.WebApi/Dockerfile
    env_file:
      - env/common.env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
    ports:
      - "5849:80"
      - "5848:443"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
      - shared-images:/dockerfiles/Images/
    networks:
      - telegram-bot

  telegram.bot.telegramjob:
    image: ${DOCKER_REGISTRY-}telegrambottelegramjob
    build:
      context: .
      dockerfile: Telegram.BOT.TelegramJob/Dockerfile
    networks:
      - telegram-bot

  telegram.bot.db:
    image: postgres:latest
    restart: always
    ports:
      - 5548:5432
    networks:
      - telegram-bot
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres

  telegram.bot.webmvc:
    image: ${DOCKER_REGISTRY-}telegrambotwebmvc
    build:
      context: .
      dockerfile: Telegram.BOT.WebMVC/Dockerfile
    env_file:
      - env/common.env
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=https://+:443;http://+:80
    ports:
      - "5847:80"
      - "5846:443"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/root/.aspnet/https:ro
      - shared-images:/dockerfiles/Images/
    networks:
      - telegram-bot

  telegram.bot.nginx:
    image: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:80"
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    networks:
      - telegram-bot

networks:
  telegram-bot:

volumes:
  postgres-data:
  shared-images:
